name: Build Docker image
run-name: Building Docker image
on:
  workflow_dispatch:
#  push:
#    branches:
#      - main
jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: us-central1-docker.pkg.dev/ceramic-3box-apps/registry/hoku-loader-cli
      VM_ZONE: us-central1-a
      INSTANCE_TEMPLATE: https://www.googleapis.com/compute/v1/projects/ceramic-3box-apps/regions/us-central1/instanceTemplates/hoku-loader-template
      MACHINE_TYPE: n1-standard-4
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_SECRET_KEY }}
      - name: Prepare git and ssh config for build context
        run: |
          mkdir root-config
          cp -r ~/.ssh root-config
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCLOUD_CREDS }}'
      - name: Authenticate Docker to GCR
        run: gcloud auth configure-docker --quiet us-central1-docker.pkg.dev
      - name: Docker Prep
        id: prep
        run: |
          # Get the short commit hash (first 7 characters of GITHUB_SHA).
          COMMIT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT
          # Format the version string as sha-[short-commit-hash].
          VERSION="sha-$COMMIT_HASH"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          ssh: default=${{ env.SSH_AUTH_SOCK }}
          context: .
          push: true
          tags: ${{env.DOCKER_IMAGE_NAME}}:latest, ${{env.DOCKER_IMAGE_NAME}}:${{ steps.prep.outputs.VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Start VM
        run: gcloud compute instances create hoku-loader-${{steps.prep.outputs.COMMIT_HASH}} --zone ${{env.VM_ZONE}} --source-instance-template ${{env.INSTANCE_TEMPLATE}} --machine-type ${{env.MACHINE_TYPE}}
